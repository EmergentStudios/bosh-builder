<?xml version="1.0" encoding="UTF-8"?>
<!--
  # SVG Sprite Sheet Overview

  TODO: add actual examples

  - dimensions: 128x128px (sprite sheets must be square!)
  - margin/padding: 1px
  - css classes:
    - lr-entity
    - lr-sprite
    - lr-stretch
    - lr-null
    - lr-anchor (el: circle, attrs: cx, cy)
    - lr-bbox (el: rect, attrs: x, y, width, height)
  - attributes (for <g/>):
    - lr:entity: string
    - lr:copy: svg ID
    - lr:anchor: point ID
    - lr:lookAt: point ID
    - lr:params: string list
    - lr:param-rotation: int [0,39]
    - lr:param-blinking: int [0,1]
    - lr:param-broken: int [0,1]
    - lr:param-crashed: int [0,1]
-->
<!--
  ## svg

  - node: svg
  - children: g.lr-entity
  - attributes:
    - width="64"
    - height="128"
      - Dimensions need to be power-of-two, preferably 64x128 to fit 6 mipmap levels in a 4096x4096 texture
    - xmlns:lr="https://www.linerider.com"
      - The lr namespace has attributes for defining mappings
-->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg"
  xmlns:lr="https://www.linerider.com"
  width="128"
  height="128"
  viewBox="0 0 128 128"
>

  <style type="text/css"><![CDATA[
    .lr-anchor {
      /* anchors should not be visible, only comment out while developing */
      display: none;
      /* for visualizing anchors during development */
      stroke-width: 0.2px;
      stroke: red;
      fill: cyan;
    }
    .lr-bbox {
      /* bounding boxes should not be visible, only comment out while developing */
      display: none;
      /* for visualizing bounding boxes during development */
      stroke-width: 0.2px;
      stroke: blue;
      fill: none;
    }
  ]]></style>

  <!-- comment out to give working area a non-white background -->
  <!-- <rect x="0" y="0" width="64" height="128" fill="cyan"/> -->

  <!--
    ## Entity

    A grouping of sprites corresponding to renderer entities. A spritesheet should contain every entity type

    - node: g.lr-entity
    - children: g.lr-sprite
    - attributes:
      - lr:entity
        - an identifier for this entity type, to be referenced in the renderer
        - currently valid types: "flag", "rider"
  -->
  <g class="lr-entity" lr:entity="flag"></g>

  <g class="lr-entity" lr:entity="rider">
    <!--
      ## Sprite

      A rectangular piece of a texture to be drawn in some pose. Sprite ordering corresponds to draw order.

      - node: g.lr-sprite
      - children: {sprite graphic} circle.lr-anchor rect.lr-bbox
      - attributes:
        - lr:anchor
          - the ID of a point on an entity where this sprite should be anchored to
        - lr:lookAt (optional)
          - the ID of a point on an entity where this sprite should be facing towards (right is forward)
          - if undefined, the sprite will be rendered with no rotation
        - id (optional)
          - the css ID that could be used to have this sprite be referenced by a copy sprite
    -->
    <!--
      ## Anchor

      Defines the coordinates of the anchor point of the sprite. Not rendered.

      - node: circle.lr-anchor
      - attributes:
        - cx
        - cy
          - the coordinates of the anchor point
    -->
    <!--
      ## Bounding Box

      Defines the bounding box of the sprite. Not Rendered.
      Should have 1px padding (min distance between bounding box and sprite)
      and 1px margin (min distance between bounding boxes).

      - node: rect.lr-bbox
      - attributes:
        - x
        - y
        - width
        - height
          - the bounding box of the sprite
    -->
    <!--
      ## Copy Sprite

      A sprite that renders using an already existing sprite.

      - node: g.lr-sprite[lr-copy]
      - children: none
      - attributes:
        - lr:copy
          - the ID of the sprite to copy
    -->
    <!--
      ## Stretchable Sprite

      A sprite that is stretched to fit between the anchor point and the lookAt point

      - node: g.lr-sprite.lr-stretch
      - attributes: lr:lookAt is required
    -->
    <!--
      ## Parametric Sprite

      A sprite that varies based upon defined parameters

      - node: g.lr-sprite[lr:params]
      - children: g[lr:param-*]
      - attributes:
        - lr:params
          - A space-separated list of parameter names to be used to select a variant
          - Parameter names:
            - rotation
            - blinking
            - broken
            - crashed
    -->
    <!--
      ## Parametric Sprite Variant

      - node: g[lr:param-*]
      - children: {sprite graphic} circle.lr-anchor rect.lr-bbox
      - attributes:
        - lr:param-*
          - should have this attribute for every param name defined in the parent Parametric Sprite
          - Parameter value types/bounds:
            - rotation: int [0,39]
            - blinking: int [0,1]
            - broken: int [0,1]
            - crashed: int [0,1]
    -->
    <!--
      ## Null Sprite

      A sprite that renders nothing. Useful for parametric sprite variants that have no rendering

      - node: g.lr-null
      - children: none
    -->
    <g class="lr-sprite lr-stretch" lr:anchor="SHOULDER" lr:lookAt="SCARF_0" id="base-scarf">
      <rect class="scarf0" x="38" y="74" width="2" height="2"/>
      <circle class="lr-anchor" cx="38" cy="75" r="0.5"/>
      <rect class="lr-bbox" x="37" y="73" width="4" height="4"/>
    </g>
    <g class="lr-sprite" lr:copy="base-scarf" lr:anchor="SCARF_0" lr:lookAt="SCARF_1"/>

    <g class="lr-sprite" lr:params="broken" lr:anchor="PEG" lr:lookAt="STRING">
      <g lr:param-broken="0">
        <use x="3" y="98" xlink:href="#sled"/>
        <circle class="lr-anchor" cx="3" cy="98" r="0.5"/>
        <rect class="lr-bbox" x="1" y="94" width="21" height="11"/>
      </g>
      <g lr:param-broken="1">
        <use x="25" y="98" xlink:href="#broken-sled"/>
        <circle class="lr-anchor" cx="25" cy="98" r="0.5"/>
        <rect class="lr-bbox" x="23" y="94" width="21" height="10"/>
      </g>
    </g>

    <g class="lr-sprite" lr:anchor="BUTT" lr:lookAt="LFOOT" id="base-leg">
      <use x="44" y="91" xlink:href="#leg"/>
      <circle class="lr-anchor" cx="44" cy="91" r="0.5"/>
      <rect class="lr-bbox" x="42" y="88" width="10" height="5"/>
    </g>

    <g class="lr-sprite lr-stretch" lr:params="crashed" lr:anchor="LHAND" lr:lookAt="STRING" id="base-string">
      <g lr:param-crashed="0">
        <line id="debug" x1="46" y1="96" x2="54" y2="96" stroke-width="0.3" stroke="black"/>
        <circle class="lr-anchor" cx="46" cy="96" r="0.5"/>
        <rect class="lr-bbox" x="45" y="94" width="10" height="4"/>
      </g>
      <g class="lr-null" lr:param-crashed="1"/>
    </g>

    <g class="lr-sprite" lr:anchor="SHOULDER" lr:lookAt="LHAND" id="base-arm">
      <use x="44" y="85" xlink:href="#arm"/>
      <circle class="lr-anchor" cx="44" cy="85" r="0.5"/>
      <rect class="lr-bbox" x="42" y="82" width="10" height="5"/>
    </g>

    <g class="lr-sprite" lr:copy="base-leg" lr:anchor="BUTT" lr:lookAt="RFOOT"/>

    <g class="lr-sprite" lr:params="rotation blinking" lr:anchor="BUTT" lr:lookAt="SHOULDER" id="face-group">
      <g lr:param-rotation="0" lr:param-blinking="0">
        <g transform="translate(-5, 5)">
          <g clip-path="url(#clipHead0-0)">
            <use xlink:href="#face" x="0" y="2.60"/>
          </g>
          <clipPath id="clipHead0-0">
            <use xlink:href="#head0-0"/>
          </clipPath>
          <path id="head0-0" class="outline no-fill" d="M 10.10 -2.40 c -3.10 0.00 -3.10 0.00 -3.10 0.00 v 4.90 c 0.00 0.00 0.00 0.00 3.10 0.00 z"/>
        </g>
        <circle class="lr-anchor" cx="-5" cy="5" r="0.5"/>
        <rect class="lr-bbox" x="1" y="1" width="5" height="8"/>
      </g>
</g>

    <g class="lr-sprite" lr:anchor="BUTT" lr:lookAt="SHOULDER">
      <use x="43" y="77" xlink:href="#body"/>
      <circle class="lr-anchor" cx="43" cy="77" r="0.5"/>
      <rect class="lr-bbox" x="42" y="73" width="17" height="8"/>
    </g>

    <g class="lr-sprite" lr:copy="base-string" lr:anchor="RHAND" lr:lookAt="STRING"/>

    <g class="lr-sprite" lr:copy="base-arm" lr:anchor="SHOULDER" lr:lookAt="RHAND"/>
  </g>

  </svg>
